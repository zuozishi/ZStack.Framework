{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "JSON schema for ASP.NET Core and Furion.",
    "type": "object",
    "properties": {
      "Kestrel": {
        "$ref": "#/definitions/kestrel"
      },
      "Logging": {
        "$ref": "#/definitions/logging"
      },
      "AllowedHosts": {
        "$ref": "#/definitions/allowedHosts"
      },
      "ConnectionStrings": {
        "$ref": "#/definitions/connectionStrings"
      },
      "AppSettings": {
        "$ref": "#/definitions/AppSettings"
      },
      "IgnoreConfigurationFiles": {
        "type": "array",
        "description": "配置被忽略扫描的 json 配置文件",
        "default": [],
        "items": {
          "type": "string",
          "description": "json 配置文件名称"
        }
      },
      "ConfigurationScanDirectories": {
        "type": "array",
        "description": "自定义 json 扫描目录",
        "default": [],
        "items": {
          "type": "string",
          "description": "目录名称"
        }
      },
      "CorsAccessorSettings": {
        "$ref": "#/definitions/CorsAccessorSettings"
      },
      "ValidationTypeMessageSettings": {
        "$ref": "#/definitions/ValidationTypeMessageSettings"
      },
      "DependencyInjectionSettings": {
        "$ref": "#/definitions/DependencyInjectionSettings"
      },
      "DynamicApiControllerSettings": {
        "$ref": "#/definitions/DynamicApiControllerSettings"
      },
      "FriendlyExceptionSettings": {
        "$ref": "#/definitions/FriendlyExceptionSettings"
      },
      "ErrorCodeMessageSettings": {
        "$ref": "#/definitions/ErrorCodeMessageSettings"
      },
      "SpecificationDocumentSettings": {
        "$ref": "#/definitions/SpecificationDocumentSettings"
      },
      "LocalizationSettings": {
        "$ref": "#/definitions/LocalizationSettings"
      },
      "JWTSettings": {
        "$ref": "#/definitions/JWTSettings"
      },
      "UnifyResultSettings": {
        "$ref": "#/definitions/UnifyResultSettings"
      }
    },
    "definitions": {
      "webOptimizer": {
        "type": "object",
        "description": "Settings for WebOptimizer.Core",
        "properties": {
          "enableCaching": {
            "description": "Determines if the \"cache-control\" HTTP headers should be set and if conditional GET (304) requests should be supported. This could be helpful to disable while in development mode.",
            "type": "boolean"
          },
          "enableTagHelperBundling": {
            "description": "Determines if `<script>` and `<link>` elements should point to the bundled path or a reference per source file should be created. This is helpful to disable when in development mode.",
            "type": "boolean",
            "default": true
          }
        }
      },
      "cdn": {
        "type": "object",
        "description": "Definitions for WebEssentials.AspNetCore.CdnTagHelpers",
        "properties": {
          "url": {
            "description": "An absolute URL used as a prefix for static resources",
            "type": "string",
            "pattern": "^((//|https?://).+|)$"
          },
          "prefetch": {
            "description": "If true, injects a <link rel='dns-prefetch'> tag that speeds up DNS resolution to the CDN.",
            "type": "boolean",
            "default": true
          }
        }
      },
      "pwa": {
        "properties": {
          "cacheId": {
            "description": "The cache identifier of the service worker (can be any string). Change this property to force the service worker to reload in browsers.",
            "type": "string",
            "default": "v1.0"
          },
          "offlineRoute": {
            "description": "The route to the page to show when offline.",
            "type": "string",
            "default": "/offline.html"
          },
          "registerServiceWorker": {
            "description": "Determines if a script that registers the service worker should be injected into the bottom of the HTML page.",
            "type": "boolean",
            "default": true
          },
          "registerWebmanifest": {
            "description": "Determines if a meta tag that points to the web manifest should be inserted at the end of the head element.",
            "type": "boolean",
            "default": true
          },
          "routesToPreCache": {
            "description": "A comma separated list of routes to pre-cache when service worker installs in the browser.",
            "type": "string",
            "default": ""
          },
          "strategy": {
            "description": "Selects one of the predefined service worker types.",
            "enum": ["cacheFirst", "cacheFirstSafe", "minimal", "networkFirst"],
            "default": "cacheFirstSafe"
          }
        }
      },
      "ElmahIo": {
        "properties": {
          "ApiKey": {
            "description": "An elmah.io API key with the Messages | Write permission.",
            "type": "string",
            "pattern": "^[0-9a-f]{32}$"
          },
          "LogId": {
            "description": "The Id of the elmah.io log to store messages in.",
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          },
          "Application": {
            "description": "An application name to put on all error messages.",
            "type": "string"
          },
          "HandledStatusCodesToLog": {
            "description": "A list of HTTP status codes (besides 404) to log even though no exception is thrown.",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "TreatLoggingAsBreadcrumbs": {
            "description": "Include log messages from Microsoft.Extensions.Logging as breadcrumbs.",
            "type": "boolean"
          },
          "HeartbeatId": {
            "description": "The Id of the elmah.io heartbeat to notify.",
            "type": "string",
            "pattern": "^[0-9a-f]{32}$"
          }
        },
        "required": ["ApiKey", "LogId"]
      },
      "protocols": {
        "description": "The protocols enabled on the endpoint.",
        "type": "string",
        "enum": [
          "None",
          "Http1",
          "Http2",
          "Http1AndHttp2",
          "Http3",
          "Http1AndHttp2AndHttp3"
        ]
      },
      "certificate": {
        "description": "Certificate configuration.",
        "type": "object",
        "properties": {
          "Path": {
            "description": "The certificate file path. If a file path is specified then the certificate will be loaded from the file system.",
            "type": "string"
          },
          "KeyPath": {
            "description": "The certificate key file path. Available in .NET 5 and later.",
            "type": "string"
          },
          "Password": {
            "description": "The certificate password used to access the private key.",
            "type": "string"
          },
          "Subject": {
            "description": "The certificate subject. If a subject is specified then the certificate will be loaded from the certificate store.",
            "type": "string"
          },
          "Store": {
            "description": "The certificate store name. Defaults to 'My'.",
            "type": "string",
            "default": "My"
          },
          "Location": {
            "description": "The certificate store location. Defaults to 'CurrentUser'.",
            "type": "string",
            "enum": ["LocalMachine", "CurrentUser"],
            "default": "CurrentUser"
          },
          "AllowInvalid": {
            "description": "A value indicating whether or not to load certificates that are considered invalid. Defaults to false.",
            "type": "boolean",
            "default": false
          }
        }
      },
      "sslProtocols": {
        "description": "Specifies allowable SSL protocols. Defaults to 'None' which allows the operating system to choose the best protocol to use, and to block protocols that are not secure. Unless your app has a specific reason not to, you should use this default. Available in .NET 5 and later.",
        "type": "array",
        "items": {
          "type": "string",
          "enum": ["None", "Tls", "Tls11", "Tls12", "Tls13"],
          "default": "None"
        }
      },
      "clientCertificateMode": {
        "description": "Specifies the client certificate requirements for a HTTPS connection. Defaults to 'NoCertificate'. Available in .NET 5 and later.",
        "type": "string",
        "enum": ["NoCertificate", "AllowCertificate", "RequireCertificate"],
        "default": "NoCertificate"
      },
      "kestrel": {
        "type": "object",
        "description": "ASP.NET Core Kestrel server configuration.",
        "properties": {
          "Endpoints": {
            "description": "Endpoints that Kestrel listens to for network requests. Each endpoint has a name specified by its JSON property name.",
            "type": "object",
            "additionalProperties": {
              "description": "Kestrel endpoint configuration.",
              "type": "object",
              "properties": {
                "Url": {
                  "description": "The scheme, host name, and port the endpoint will listen on. A Url is required.",
                  "type": "string",
                  "format": "uri"
                },
                "Protocols": {
                  "$ref": "#/definitions/protocols"
                },
                "SslProtocols": {
                  "$ref": "#/definitions/sslProtocols"
                },
                "Certificate": {
                  "$ref": "#/definitions/certificate"
                },
                "ClientCertificateMode": {
                  "$ref": "#/definitions/clientCertificateMode"
                },
                "Sni": {
                  "description": "Server Name Indication (SNI) configuration. This enables the mapping of client requested host names to certificates and other TLS settings. Wildcard names prefixed with '*.', as well as a top level '*' are supported. Available in .NET 5 and later.",
                  "type": "object",
                  "additionalProperties": {
                    "description": "Endpoint SNI configuration.",
                    "type": "object",
                    "properties": {
                      "Protocols": {
                        "$ref": "#/definitions/protocols"
                      },
                      "SslProtocols": {
                        "$ref": "#/definitions/sslProtocols"
                      },
                      "Certificate": {
                        "$ref": "#/definitions/certificate"
                      },
                      "ClientCertificateMode": {
                        "$ref": "#/definitions/clientCertificateMode"
                      }
                    }
                  }
                }
              },
              "required": ["Url"]
            }
          },
          "EndpointDefaults": {
            "description": "Default configuration applied to all endpoints. Named endpoint specific configuration overrides defaults.",
            "type": "object",
            "properties": {
              "Protocols": {
                "$ref": "#/definitions/protocols"
              },
              "SslProtocols": {
                "$ref": "#/definitions/sslProtocols"
              },
              "ClientCertificateMode": {
                "$ref": "#/definitions/clientCertificateMode"
              }
            }
          },
          "Certificates": {
            "description": "Certificates that Kestrel uses with HTTPS endpoints. Each certificate has a name specified by its JSON property name. The 'Default' certificate is used by HTTPS endpoints that haven't specified a certificate.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/certificate"
            }
          }
        }
      },
      "logLevelThreshold": {
        "description": "Log level threshold.",
        "type": "string",
        "enum": [
          "Trace",
          "Debug",
          "Information",
          "Warning",
          "Error",
          "Critical",
          "None"
        ]
      },
      "logLevel": {
        "description": "Log level configurations used when creating logs. Only logs that exceeds its matching log level will be enabled. Each log level configuration has a category specified by its JSON property name. For more information about configuring log levels, see https://docs.microsoft.com/aspnet/core/fundamentals/logging/#configure-logging.",
        "type": "object",
        "additionalProperties": {
          "$ref": "#/definitions/logLevelThreshold"
        }
      },
      "logging": {
        "type": "object",
        "description": "Configuration for Microsoft.Extensions.Logging.",
        "properties": {
          "LogLevel": {
            "$ref": "#/definitions/logLevel"
          },
          "Console": {
            "properties": {
              "LogLevel": {
                "$ref": "#/definitions/logLevel"
              },
              "FormatterName": {
                "description": "Name of the log message formatter to use. Defaults to 'simple'.",
                "type": "string",
                "default": "simple"
              },
              "FormatterOptions": {
                "description": "Log message formatter options. Additional properties are available on the options depending on the configured formatter. The formatter is specified by FormatterName.",
                "type": "object",
                "properties": {
                  "IncludeScopes": {
                    "description": "Include scopes when true. Defaults to false.",
                    "type": "boolean",
                    "default": false
                  },
                  "TimestampFormat": {
                    "description": "Format string used to format timestamp in logging messages. Defaults to null.",
                    "type": "string"
                  },
                  "UseUtcTimestamp": {
                    "description": "Indication whether or not UTC timezone should be used to for timestamps in logging messages. Defaults to false.",
                    "type": "boolean",
                    "default": false
                  }
                }
              },
              "LogToStandardErrorThreshold": {
                "description": "The minimum level of messages are written to Console.Error.",
                "$ref": "#/definitions/logLevelThreshold"
              }
            }
          },
          "EventSource": {
            "properties": {
              "LogLevel": {
                "$ref": "#/definitions/logLevel"
              }
            }
          },
          "Debug": {
            "properties": {
              "LogLevel": {
                "$ref": "#/definitions/logLevel"
              }
            }
          },
          "EventLog": {
            "properties": {
              "LogLevel": {
                "$ref": "#/definitions/logLevel"
              }
            }
          },
          "ElmahIo": {
            "properties": {
              "LogLevel": {
                "$ref": "#/definitions/logLevel"
              }
            }
          },
          "ElmahIoBreadcrumbs": {
            "properties": {
              "LogLevel": {
                "$ref": "#/definitions/logLevel"
              }
            }
          },
          "File": {
            "type": "object",
            "description": "文件日志记录器配置选项",
            "properties": {
              "FileName": {
                "type": "string",
                "description": "日志文件完整路径或文件名，推荐 .log 作为拓展名",
                "default": "application.log"
              },
              "Append": {
                "type": "boolean",
                "description": "追加到已存在日志文件或覆盖它们",
                "default": true
              },
              "FileSizeLimitBytes": {
                "type": "number",
                "description": "控制每一个日志文件最大存储大小，默认无限制，如果指定了该值，那么日志文件大小超出了该配置就会创建的日志文件，新创建的日志文件命名规则：文件名+[递增序号].log",
                "default": 0
              },
              "MaxRollingFiles": {
                "type": "number",
                "description": "控制最大创建的日志文件数量，默认无限制，配合 FileSizeLimitBytes 使用，如果指定了该值，那么超出该值将从最初日志文件中从头写入覆盖",
                "default": 0
              },
              "MinimumLevel": {
                "description": "最低日志级别",
                "type": "string",
                "default": "Trace",
                "enum": [
                  "Trace",
                  "Debug",
                  "Information",
                  "Warning",
                  "Error",
                  "Critical",
                  "None"
                ]
              },
              "UseUtcTimestamp": {
                "type": "boolean",
                "description": "是否使用 UTC 时间戳",
                "default": false
              },
              "IncludeScopes": {
                "type": "boolean",
                "description": "是否启用日志上下文",
                "default": true
              },
              "DateFormat": {
                "type": "string",
                "description": "日期格式化",
                "default": "yyyy-MM-dd HH:mm:ss(zzz) dddd"
              },
              "WithTraceId": {
                "type": "boolean",
                "description": "是否显示跟踪 Id",
                "default": false
              },
              "WithStackFrame": {
                "type": "boolean",
                "description": "显示堆栈框架（程序集和方法签名）",
                "default": false
              }
            }
          },
          "Database": {
            "type": "object",
            "description": "数据库日志记录器配置选项",
            "properties": {
              "MinimumLevel": {
                "description": "最低日志级别",
                "type": "string",
                "default": "Trace",
                "enum": [
                  "Trace",
                  "Debug",
                  "Information",
                  "Warning",
                  "Error",
                  "Critical",
                  "None"
                ]
              },
              "UseUtcTimestamp": {
                "type": "boolean",
                "description": "是否使用 UTC 时间戳",
                "default": false
              },
              "IncludeScopes": {
                "type": "boolean",
                "description": "是否启用日志上下文",
                "default": true
              },
              "DateFormat": {
                "type": "string",
                "description": "日期格式化",
                "default": "yyyy-MM-dd HH:mm:ss(zzz) dddd"
              },
              "IgnoreReferenceLoop": {
                "type": "boolean",
                "description": "忽略日志循环输出",
                "default": true
              },
              "WithTraceId": {
                "type": "boolean",
                "description": "是否显示跟踪 Id",
                "default": false
              },
              "WithStackFrame": {
                "type": "boolean",
                "description": "显示堆栈框架（程序集和方法签名）",
                "default": false
              }
            }
          },
          "Monitor": {
            "type": "object",
            "description": "日志监视器配置",
            "properties": {
              "GlobalEnabled": {
                "description": "是否全局启用",
                "type": "boolean",
                "default": false
              },
              "IncludeOfMethods": {
                "description": "配置包含拦截的方法名列表（完全限定名格式：程序集名称.类名.方法名），注意无需添加参数签名，GlobalEnabled:false 有效",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "default": []
              },
              "ExcludeOfMethods": {
                "description": "配置排除拦截的方法名列表（完全限定名格式：程序集名称.类名.方法名），注意无需添加参数签名，GlobalEnabled:true 有效",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "default": []
              },
              "LogLevel": {
                "description": "默认日志消息级别",
                "type": "string",
                "default": "Information",
                "enum": [
                  "Trace",
                  "Debug",
                  "Information",
                  "Warning",
                  "Error",
                  "Critical",
                  "None"
                ]
              },
              "BahLogLevel": {
                "description": "业务日志消息级别，控制 Oops.Oh 和 Oops.Bah 输出日志级别",
                "type": "string",
                "default": "Information",
                "enum": [
                  "Trace",
                  "Debug",
                  "Information",
                  "Warning",
                  "Error",
                  "Critical",
                  "None"
                ]
              },
              "WithReturnValue": {
                "description": "配置是否包含返回值，默认 true",
                "type": "boolean",
                "default": true
              },
              "ReturnValueThreshold": {
                "description": "配置返回值字符串阈值，默认 0",
                "type": "number",
                "default": 0
              },
              "JsonBehavior": {
                "description": "配置 LoggingMonitor Json 输出行为",
                "type": "string",
                "default": "None",
                "enum": [ "None", "OnlyJson", "All" ]
              },
              "JsonIndented": {
                "description": "配置是否格式化 JSON，默认 false",
                "type": "boolean",
                "default": false
              },
              "ContractResolver": {
                "description": "配置 Json 属性命名规则（返回值）",
                "type": "string",
                "default": "CamelCase",
                "enum": [ "CamelCase", "Default" ]
              },
              "MethodsSettings": {
                "description": "配置监听方法更多信息",
                "type": "array",
                "default": [],
                "items": {
                  "type": "object",
                  "description": "单个监听方法配置",
                  "properties": {
                    "FullName": {
                      "description": "方法完全限定名格式：程序集名称.类名.方法名",
                      "type": "string"
                    },
                    "WithReturnValue": {
                      "description": "配置是否包含返回值，默认 true",
                      "type": "boolean",
                      "default": true
                    },
                    "ReturnValueThreshold": {
                      "description": "配置返回值字符串阈值，默认 0",
                      "type": "number",
                      "default": 0
                    },
                    "JsonBehavior": {
                      "description": "配置 LoggingMonitor Json 输出行为",
                      "type": "string",
                      "default": "None",
                      "enum": [ "None", "OnlyJson", "All" ]
                    },
                    "JsonIndented": {
                      "description": "配置是否格式化 JSON，默认 false",
                      "type": "boolean",
                      "default": false
                    },
                    "ContractResolver": {
                      "description": "配置 Json 属性命名规则（返回值）",
                      "type": "string",
                      "default": "CamelCase",
                      "enum": [ "CamelCase", "Default" ]
                    }
                  }
                }
              }
            }
          }
        },
        "additionalProperties": {
          "type": "object",
          "description": "Logging configuration for a provider. The provider name must match the configuration's JSON property property name.",
          "properties": {
            "LogLevel": {
              "$ref": "#/definitions/logLevel"
            }
          }
        }
      },
      "allowedHosts": {
        "description": "ASP.NET Core host filtering middleware configuration. Allowed hosts is a semicolon-delimited list of host names without port numbers. Requests without a matching host name will be refused. Host names may be prefixed with a '*.' wildcard, or use '*' to allow all hosts.",
        "type": "string"
      },
      "connectionStrings": {
        "description": "Connection string configuration. Get connection strings with the IConfiguration.GetConnectionString(string) extension method.",
        "type": "object",
        "additionalProperties": {
          "description": "Connection string configuration. Each connection string has a name specified by its JSON property name.",
          "type": "string"
        }
      },
      "NLog": {
        "type": "object",
        "description": "NLog configuration",
        "default": {},
        "properties": {
          "autoReload": {
            "type": "boolean",
            "description": "Automatically reload the NLog configuration when notified that appsettings.json file has changed.",
            "default": false
          },
          "throwConfigExceptions": {
            "type": ["boolean", "null"],
            "description": "Throws an exception when there is a config error? If not set, then throwExceptions will be used for this setting.",
            "default": false
          },
          "throwExceptions": {
            "type": "boolean",
            "description": "Throws an exception when there is an error. For unit testing only and advanced troubleshooting.",
            "default": false
          },
          "internalLogLevel": {
            "type": "string",
            "description": "The minimal log level for the internal logger.",
            "enum": ["Trace", "Debug", "Info", "Warn", "Error", "Fatal", "Off"],
            "default": "Off"
          },
          "internalLogFile": {
            "type": "string",
            "description": "Write internal log to the specified filepath"
          },
          "internalLogToConsole": {
            "type": "boolean",
            "description": "Write internal log to a console",
            "default": "false"
          },
          "internalLogToConsoleError": {
            "type": "boolean",
            "description": "Write internal log to a console with error stream",
            "default": "false"
          },
          "globalThreshold": {
            "type": "string",
            "description": "Log events below this threshold are not logged.",
            "enum": ["Trace", "Debug", "Info", "Warn", "Error", "Fatal", "Off"],
            "default": "Off"
          },
          "autoShutdown": {
            "type": "boolean",
            "description": "Automatically call `LogFactory.Shutdown` on AppDomain.Unload or AppDomain.ProcessExit",
            "default": "true"
          },
          "extensions": {
            "type": "array",
            "description": "Load NLog extension packages for additional targets and layouts",
            "default": [],
            "items": {
              "type": "object",
              "description": "",
              "default": {},
              "properties": {
                "assembly": {
                  "type": "string",
                  "description": "Assembly Name of the NLog extension package."
                },
                "prefix": {
                  "type": "string",
                  "description": "Appends prefix to all type-names loaded from the assembly",
                  "default": ""
                },
                "assemblyFile": {
                  "type": "string",
                  "description": "Absolute filepath to the Assembly-file of the NLog extension package.",
                  "default": ""
                }
              }
            }
          },
          "variables": {
            "type": "object",
            "description": "Key-value pair of variables",
            "propertyNames": {
              "pattern": "^[A-Za-z0-9_.-]+$"
            },
            "patternProperties": {
              ".*": {
                "type": ["number", "string", "boolean"]
              }
            }
          },
          "targetDefaultWrapper": {
            "type": "object",
            "description": "Wrap all defined targets with this custom target wrapper.",
            "default": {},
            "required": ["type"],
            "properties": {
              "type": {
                "type": "string",
                "description": ""
              }
            }
          },
          "targets": {
            "type": "object",
            "description": "",
            "default": {},
            "properties": {
              "async": {
                "type": "boolean",
                "description": "Wrap all defined targets using AsyncWrapper with OverflowAction=Discard for better performance."
              }
            }
          },
          "rules": {
            "oneOf": [
              {
                "type": "array",
                "description": "",
                "default": [],
                "items": {
                  "$ref": "#/definitions/NLogRulesItem"
                }
              },
              {
                "type": "object",
                "propertyNames": {
                  "pattern": "^[0-9]+$"
                },
                "patternProperties": {
                  ".*": {
                    "$ref": "#/definitions/NLogRulesItem"
                  }
                }
              }
            ]
          }
        }
      },
      "NLogRulesItem": {
        "type": "object",
        "description": "Redirect LogEvents from matching Logger objects to specified targets",
        "default": {},
        "required": ["logger"],
        "properties": {
          "logger": {
            "type": "string",
            "description": "Match Logger objects based on their Logger-name. Can use wildcard characters ('*' or '?')."
          },
          "ruleName": {
            "type": "string",
            "description": "Rule identifier to allow rule lookup with Configuration.FindRuleByName and Configuration.RemoveRuleByName."
          },
          "level": {
            "anyOf": [
              {
                "type": "string",
                "description": "",
                "enum": ["Trace", "Debug", "Info", "Warn", "Error", "Fatal"]
              },
              {
                "type": "string"
              }
            ]
          },
          "levels": {
            "type": "string",
            "description": "Comma separated list of levels that this rule matches."
          },
          "minLevel": {
            "anyOf": [
              {
                "type": "string",
                "description": "",
                "enum": ["Trace", "Debug", "Info", "Warn", "Error", "Fatal"]
              },
              {
                "type": "string"
              }
            ]
          },
          "maxLevel": {
            "anyOf": [
              {
                "type": "string",
                "description": "",
                "enum": ["Trace", "Debug", "Info", "Warn", "Error", "Fatal"]
              },
              {
                "type": "string"
              }
            ]
          },
          "finalMinLevel": {
            "anyOf": [
              {
                "type": "string",
                "description": "",
                "enum": ["Trace", "Debug", "Info", "Warn", "Error", "Fatal"]
              },
              {
                "type": "string"
              }
            ]
          },
          "writeTo": {
            "type": "string",
            "description": "Name or names of a target - separated by comma. Remove this property for sending events to the blackhole."
          },
          "final": {
            "type": "boolean",
            "description": "Ignore further rules if this one matches.",
            "default": false
          },
          "enabled": {
            "type": "boolean",
            "description": "",
            "default": true
          },
          "filters": {
            "oneOf": [
              {
                "type": "array",
                "description": "",
                "default": [],
                "items": {
                  "type": "object",
                  "description": "",
                  "default": {},
                  "required": ["type"],
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": ""
                    },
                    "action": {
                      "type": "string",
                      "description": "Result action when filter matches logevent.",
                      "enum": [
                        "Neutral",
                        "Log",
                        "Ignore",
                        "LogFinal",
                        "IgnoreFinal"
                      ],
                      "default": "Neutral"
                    }
                  }
                }
              },
              {
                "type": "object",
                "description": "",
                "default": {}
              }
            ]
          },
          "filterDefaultAction": {
            "type": "string",
            "description": "Default action if none of the filters match.",
            "enum": ["Neutral", "Log", "Ignore", "LogFinal", "IgnoreFinal"],
            "default": "Ignore"
          }
        }
      },
      "umbraco": {
        "description": "Configuration of Open Source .NET CMS - Umbraco",
        "properties": {
          "CMS": {
            "type": "object",
            "properties": {
              "ActiveDirectory": {
                "$ref": "#/definitions/umbracoActiveDirectory"
              },
              "Content": {
                "$ref": "#/definitions/umbracoContent"
              },
              "Debug": {
                "$ref": "#/definitions/umbracoDebug"
              },
              "Examine": {
                "properties": {
                  "LuceneDirectoryFactory": {
                    "description": "Lucene directory factory type",
                    "type": "string"
                  }
                }
              },
              "ExceptionFilter": {
                "properties": {
                  "Disabled": {
                    "description": "Indicating whether the exception filter is disabled",
                    "type": "boolean",
                    "default": false
                  }
                }
              },
              "Global": {
                "$ref": "#/definitions/umbracoGlobal"
              },
              "HealthChecks": {
                "$ref": "#/definitions/umbracoHealthChecks"
              },
              "Hosting": {
                "$ref": "#/definitions/umbracoHosting"
              },
              "Imaging": {
                "$ref": "#/definitions/umbracoImaging"
              },
              "KeepAlive": {
                "$ref": "#/definitions/umbracoKeepAlive"
              },
              "Logging": {
                "properties": {
                  "MaxLogAge": {
                    "description": "Maximum age of a log file - https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings",
                    "type": "string",
                    "default": "1.00:00:00"
                  }
                }
              },
              "ModelsBuilder": {
                "$ref": "#/definitions/umbracoModelsBuilder"
              },
              "NuCache": {
                "properties": {
                  "BTreeBlockSize": {
                    "type": "integer"
                  }
                }
              },
              "Plugins": {
                "properties": {
                  "BrowsableFileExtensions": {
                    "description": "Allowed file extensions (including the period .) that should be accessible from the browser",
                    "type": ["string"]
                  }
                }
              },
              "RequestHandler": {
                "$ref": "#/definitions/umbracoRequestHandler"
              },
              "RichTextEditor": {
                "$ref": "#/definitions/umbracoRichTextEditor"
              },
              "Runtime": {
                "properties": {
                  "MaxQueryStringLength": {
                    "description": "Value for the maximum query string length",
                    "type": "integer"
                  },
                  "MaxRequestLength": {
                    "description": "Value for the maximum request length",
                    "type": "integer"
                  }
                }
              },
              "RuntimeMinification": {
                "$ref": "#/definitions/umbracoRuntimeMinification"
              },
              "Security": {
                "$ref": "#/definitions/umbracoSecurity"
              },
              "Tours": {
                "properties": {
                  "EnableTours": {
                    "description": "Indicating whether back-office tours are enabled",
                    "type": "boolean",
                    "default": true
                  }
                }
              },
              "TypeFinder": {
                "properties": {
                  "AssembliesAcceptingLoadExceptions": {
                    "description": "A CSV string of assemblies that accept load exceptions during type finder operations",
                    "type": "string"
                  }
                }
              },
              "WebRouting": {
                "$ref": "#/definitions/umbracoWebRouting"
              },
              "Unattended": {
                "$ref": "#/definitions/umbracoUnattended"
              }
            }
          }
        },
        "required": ["CMS"]
      },
      "umbracoActiveDirectory": {
        "description": "Configuration of Active Directory for Umbraco CMS",
        "properties": {
          "Domain": {
            "type": "string",
            "description": "Active Directory Domain"
          }
        }
      },
      "umbracoContent": {
        "properties": {
          "AllowedUploadFiles": {
            "description": "Collection of file extensions without . that are allowed for upload",
            "type": ["string"]
          },
          "DisallowedUploadFiles": {
            "description": "Collection of file extensions without . that are disallowed for upload",
            "type": ["string"]
          },
          "Error404Collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/umbracoContentErrorPage"
            }
          },
          "Imaging": {
            "properties": {
              "AutoFillImageProperties": {
                "description": "Imaging autofill following media file upload fields",
                "properties": {
                  "Alias": {
                    "default": "umbracoFile"
                  },
                  "ExtensionFieldAlias": {
                    "default": "umbracoExtension"
                  },
                  "HeightFieldAlias": {
                    "default": "umbracoHeight"
                  },
                  "LengthFieldAlias": {
                    "default": "umbracoBytes"
                  },
                  "WidthFieldAlias": {
                    "default": "umbracoWidth"
                  }
                }
              },
              "ImageFileTypes": {
                "description": "Collection of accepted image file extensions",
                "type": ["string"]
              }
            }
          },
          "LoginBackgroundImage": {
            "description": "Path to the login screen background image",
            "default": "assets/img/login.jpg",
            "type": "string"
          },
          "LoginLogoImage": {
            "description": "Path to the login screen logo image",
            "default": "assets/img/application/umbraco_logo_white.svg",
            "type": "string"
          },
          "MacroErrors": {
            "description": "Macro error behaviour",
            "enum": ["Inline", "Silent", "Throw", "Content"]
          },
          "Notifications": {
            "properties": {
              "Email": {
                "description": "Email address used for notifications",
                "type": "string"
              },
              "DisableHtmlEmail": {
                "description": "Whether HTML email notifications should be disabled",
                "type": "boolean",
                "default": false
              }
            }
          },
          "PreviewBadge": {
            "description": "Preview badge mark-up",
            "type": "string"
          },
          "ResolveUrlsFromTextString": {
            "description": "URLs should be resolved from text strings",
            "type": "boolean",
            "default": false
          },
          "ShowDeprecatedPropertyEditors": {
            "description": "Deprecated property editors should be shown",
            "type": "boolean",
            "default": false
          }
        }
      },
      "umbracoContentErrorPage": {
        "properties": {
          "ContentId": {
            "description": "An int of the content",
            "type": "integer"
          },
          "ContentKey": {
            "description": "A guid of the content",
            "type": "string"
          },
          "ContentXPath": {
            "description": "An XPath query for the content",
            "type": "string"
          },
          "Culture": {
            "description": "Content culture",
            "type": "string"
          }
        }
      },
      "umbracoDebug": {
        "properties": {
          "LogIncompletedScopes": {
            "description": "Indicating whether incompleted scopes should be logged",
            "type": "boolean",
            "default": false
          },
          "DumpOnTimeoutThreadAbort": {
            "description": "Indicating whether memory dumps on thread abort should be taken",
            "type": "boolean",
            "default": false
          }
        }
      },
      "umbracoGlobal": {
        "properties": {
          "ReservedUrls": {
            "description": "CSV string of reserved URLs (must end with a comma)",
            "type": "string",
            "default": "~/config/splashes/noNodes.aspx,~/.well-known,"
          },
          "ReservedPaths": {
            "description": "CSV string of reserved paths (must end with a comma)",
            "type": "string",
            "default": "~/app_plugins/,~/install/,~/mini-profiler-resources/,~/umbraco/,"
          },
          "TimeOut": {
            "description": "Duration of timeout https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings",
            "type": "string",
            "default": "00:20:00"
          },
          "DefaultUILanguage": {
            "description": "Default UI language of Umbraco backoffice",
            "type": "string",
            "default": "en-US"
          },
          "HideTopLevelNodeFromPath": {
            "description": "Indicating whether to hide the top level node from the path",
            "type": "boolean",
            "default": false
          },
          "UseHttps": {
            "description": "Indicating whether HTTPS should be used",
            "type": "boolean",
            "default": false
          },
          "VersionCheckPeriod": {
            "description": "Check for new version. Period in days",
            "type": "integer",
            "default": 7
          },
          "UmbracoPath": {
            "description": "Umbraco back-office path",
            "type": "string",
            "default": "~/umbraco"
          },
          "IconsPath": {
            "description": "Path to Umbraco Icons for backoffice",
            "type": "string",
            "default": "~/umbraco/assets/icons"
          },
          "UmbracoCssPath": {
            "description": "Path to store CSS files used for website built with Umbraco",
            "type": "string",
            "default": "~/css"
          },
          "UmbracoMediaPath": {
            "description": "Path to store media files",
            "type": "string",
            "default": "~/media"
          },
          "InstallMissingDatabase": {
            "description": "Indicating whether to install the database when it is missing",
            "type": "boolean",
            "default": false
          },
          "DisableElectionForSingleServer": {
            "description": "Indicating whether to disable the election for a single server",
            "type": "boolean",
            "default": false
          },
          "NoNodesViewPath": {
            "description": "Path to view when the website built with Umbraco has no content nodes",
            "type": "string",
            "default": "~/umbraco/UmbracoWebsite/NoNodes.cshtml"
          },
          "DatabaseServerRegistrar": {
            "properties": {
              "WaitTimeBetweenCalls": {
                "description": "The amount of time to wait between calls to the database on the background thread https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings",
                "type": "string",
                "default": "00:01:00"
              },
              "StaleServerTimeout": {
                "description": "The time span to wait before considering a server stale, after it has last been accessed https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings",
                "type": "string",
                "default": "00:02:00"
              }
            }
          },
          "DatabaseServerMessenger": {
            "properties": {
              "MaxProcessingInstructionCount": {
                "description": "The maximum number of instructions that can be processed at startup; otherwise the server cold-boots (rebuilds its caches)",
                "type": "integer",
                "default": 1000
              },
              "TimeToRetainInstructions": {
                "description": "The time to keep instructions in the database. Records older than this number will be pruned https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings",
                "type": "string",
                "default": "2.00:00:00"
              },
              "TimeBetweenSyncOperations": {
                "description": "The time to wait between each sync operations https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings",
                "type": "string",
                "default": "00:00:05"
              },
              "TimeBetweenPruneOperations": {
                "description": "The time to wait between each prune operations https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings",
                "type": "string",
                "default": "00:01:00"
              }
            }
          },
          "Smtp": {
            "properties": {
              "From": {
                "description": "Email address to use for messages",
                "type": "string"
              },
              "Host": {
                "description": "SMTP Server hostname",
                "type": "string"
              },
              "Port": {
                "description": "SMTP Server Port Number",
                "type": "integer"
              },
              "SecureSocketOptions": {
                "description": "Secure socket options for SMTP server",
                "enum": [
                  "None",
                  "Auto",
                  "SslOnConnect",
                  "StartTls",
                  "StartTlsWhenAvailable"
                ],
                "default": "Auto"
              },
              "PickupDirectoryLocation": {
                "description": "SMTP pick-up directory path",
                "type": "string"
              },
              "DeliveryMethod": {
                "description": "SMTP delivery method",
                "enum": [
                  "Network",
                  "SpecifiedPickupDirectory",
                  "PickupDirectoryFromIis"
                ],
                "default": "Network"
              },
              "Username": {
                "description": "SMTP server username",
                "type": "string"
              },
              "Password": {
                "description": "SMTP server password",
                "type": "string"
              }
            }
          }
        }
      },
      "umbracoHealthChecks": {
        "properties": {
          "DisabledChecks": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/umbracoDisabledHealthChecks"
            }
          },
          "Notification": {
            "properties": {
              "Enabled": {
                "description": "Indicating whether health check notifications are enabled",
                "type": "boolean",
                "default": false
              },
              "FirstRunTime": {
                "description": "The first run time of a healthcheck notification in crontab format",
                "type": "string"
              },
              "Period": {
                "description": "The period of the healthcheck notifications are run https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings",
                "type": "string",
                "default": "1.00:00:00"
              },
              "NotificationMethods": {
                "description": "A collection of health check notification methods that are set by their alias such as 'email'",
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "Enabled": {
                      "description": "Indicating whether the health check notification method is enabled",
                      "type": "boolean"
                    },
                    "Verbosity": {
                      "description": "The health check notifications reporting verbosity",
                      "enum": ["Summary", "Detailed"],
                      "default": "Summary"
                    },
                    "FailureOnly": {
                      "description": "Indicating whether the health check notifications should occur on failures only",
                      "type": "boolean",
                      "default": false
                    },
                    "Settings": {
                      "description": "An object of Health Check Notification provider specific settings. For the email notification it uses a setting 'RecipientEmail'",
                      "type": "object"
                    }
                  }
                }
              },
              "DisabledChecks": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/umbracoDisabledHealthChecks"
                }
              }
            }
          }
        }
      },
      "umbracoDisabledHealthChecks": {
        "properties": {
          "Id": {
            "description": "Guid of healthcheck to disable",
            "type": "string"
          }
        }
      },
      "umbracoHosting": {
        "properties": {
          "ApplicationVirtualPath": {
            "type": "string"
          },
          "Debug": {
            "description": "Indicating whether umbraco is running in [debug mode]",
            "type": "boolean",
            "default": false
          },
          "LocalTempStorageLocation": {
            "description": "The location of temporary files",
            "default": "Default",
            "enum": ["Default", "EnvironmentTemp"]
          }
        }
      },
      "umbracoImaging": {
        "properties": {
          "Cache": {
            "properties": {
              "BrowserMaxAge": {
                "description": "Browser image cache maximum age https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings",
                "type": "string",
                "default": "7.00:00:00"
              },
              "CacheMaxAge": {
                "description": "Image cache maximum age https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings",
                "type": "string",
                "default": "365.00:00:00"
              },
              "CachedNameLength": {
                "description": "Length of the cached name",
                "type": "integer",
                "default": 8
              },
              "CacheFolder": {
                "description": "Location of media cache folder",
                "type": "string",
                "default": "..\\umbraco\\mediacache"
              }
            }
          },
          "Resize": {
            "properties": {
              "MaxWidth": {
                "description": "Value for the maximum resize width",
                "type": "integer",
                "default": 5000
              },
              "MaxHeight": {
                "description": "Value for the maximum resize height",
                "type": "integer",
                "default": 5000
              }
            }
          }
        }
      },
      "umbracoKeepAlive": {
        "properties": {
          "DisableKeepAliveTask": {
            "description": "Indicating whether the keep alive task is disabled",
            "type": "boolean",
            "default": false
          },
          "KeepAlivePingUrl": {
            "description": "Keep alive ping URL. {umbracoApplicationUrl} is replaced",
            "type": "string",
            "default": "{umbracoApplicationUrl}/api/keepalive/ping"
          }
        }
      },
      "umbracoRichTextEditor": {
        "properties": {
          "Commands": {
            "description": "Commands to add to the TinyMCE Richtext editor",
            "type": "array",
            "items": {
              "$ref": "#/definitions/umbracoRichTextEditorCommands"
            }
          },
          "Plugins": {
            "description": "An array of TinyMCE Plugins to load such as 'paste', 'table'",
            "type": ["string"]
          },
          "CustomConfig": {
            "description": "Custom configuration for TinyMCE and its plugins",
            "type": "object"
          },
          "ValidElements": {
            "description": "A CSV string of valid HTML elements in the richtext editor. Ex: iframe[*],button[class|title]",
            "type": "string"
          },
          "InvalidElements": {
            "description": "A CSV string of invalid HTML elements in the richtext editor. Ex: font",
            "type": "string"
          }
        }
      },
      "umbracoRichTextEditorCommands": {
        "properties": {
          "Name": {
            "description": "Friendly name of Richtext Editor Command",
            "type": "string"
          },
          "Alias": {
            "description": "Alias of the Richtext Editor Command",
            "type": "string"
          },
          "Mode": {
            "description": "Set how the Richtext Editor Command can be used. Such as when a selection is made",
            "enum": ["Insert", "Selection", "All"]
          }
        }
      },
      "umbracoRequestHandler": {
        "properties": {
          "AddTrailingSlash": {
            "description": "Indicating whether to add a trailing slash to URLs",
            "type": "boolean",
            "default": true
          },
          "CharCollection": {
            "description": "Character collection for replacements",
            "type": "array",
            "items": {
              "$ref": "#/definitions/umbracoCharCollection"
            }
          },
          "ConvertUrlsToAscii": {
            "description": "Indicating whether to convert URLs to ASCII (valid values: true, try or false)",
            "enum": ["try", "true", "false"],
            "default": "try"
          }
        }
      },
      "umbracoCharCollection": {
        "required": ["Char", "Replacement"],
        "properties": {
          "Char": {
            "type": "string",
            "default": "ä"
          },
          "Replacement": {
            "type": "string",
            "default": "ae"
          }
        }
      },
      "umbracoRuntimeMinification": {
        "properties": {
          "UseInMemoryCache": {
            "type": "boolean",
            "default": false
          },
          "CacheBuster": {
            "description": "Cache buster type to use",
            "enum": ["Version", "AppDomain", "Timestamp"],
            "default": "Version"
          }
        }
      },
      "umbracoSecurity": {
        "properties": {
          "AllowPasswordReset": {
            "description": "Indicating whether to allow user password reset",
            "type": "boolean",
            "default": true
          },
          "AuthCookieDomain": {
            "description": "Authorization cookie domain",
            "type": "string"
          },
          "AuthCookieName": {
            "description": "The authorization cookie name",
            "type": "string",
            "default": "UMB_UCONTEXT"
          },
          "HideDisabledUsersInBackOffice": {
            "description": "Indicating whether to hide disabled users in the back-office",
            "type": "boolean",
            "default": false
          },
          "KeepUserLoggedIn": {
            "description": "Indicating whether to keep the user logged in",
            "type": "boolean",
            "default": false
          },
          "MemberPassword": {
            "$ref": "#/definitions/umbracoMemberPassword"
          },
          "UsernameIsEmail": {
            "description": "Indicating whether the user's email address is to be considered as their username",
            "type": "boolean",
            "default": true
          },
          "UserPassword": {
            "$ref": "#/definitions/umbracoUserPassword"
          }
        }
      },
      "umbracoMemberPassword": {
        "properties": {
          "RequiredLength": {
            "type": "integer",
            "default": 10
          },
          "RequireNonLetterOrDigit": {
            "type": "boolean",
            "default": false
          },
          "RequireDigit": {
            "type": "boolean",
            "default": false
          },
          "RequireLowercase": {
            "type": "boolean",
            "default": false
          },
          "RequireUppercase": {
            "type": "boolean",
            "default": false
          },
          "MaxFailedAccessAttemptsBeforeLockout": {
            "type": "integer",
            "default": 5
          },
          "HashAlgorithmType": {
            "type": "string",
            "default": "HMACSHA256"
          }
        }
      },
      "umbracoUserPassword": {
        "properties": {
          "RequiredLength": {
            "type": "integer",
            "default": 10
          },
          "RequireNonLetterOrDigit": {
            "type": "boolean",
            "default": false
          },
          "RequireDigit": {
            "type": "boolean",
            "default": false
          },
          "RequireLowercase": {
            "type": "boolean",
            "default": false
          },
          "RequireUppercase": {
            "type": "boolean",
            "default": false
          },
          "MaxFailedAccessAttemptsBeforeLockout": {
            "type": "integer",
            "default": 5
          },
          "HashAlgorithmType": {
            "type": "string",
            "default": "PBKDF2.ASPNETCORE.V3"
          }
        }
      },
      "umbracoWebRouting": {
        "properties": {
          "TryMatchingEndpointsForAllPages": {
            "description": "Indicating whether to check if any routed endpoints match a front-end request before the Umbraco dynamic router tries to map the request to an Umbraco content item",
            "type": "boolean",
            "default": false
          },
          "TrySkipIisCustomErrors": {
            "description": "Indicating whether IIS custom errors should be skipped",
            "type": "boolean",
            "default": false
          },
          "InternalRedirectPreservesTemplate": {
            "description": "Indicating whether an internal redirect should preserve the template",
            "type": "boolean",
            "default": false
          },
          "DisableAlternativeTemplates": {
            "description": "Indicating whether the use of alternative templates are disabled",
            "type": "boolean",
            "default": false
          },
          "ValidateAlternativeTemplates": {
            "description": "Indicating whether the use of alternative templates should be validated",
            "type": "boolean",
            "default": false
          },
          "DisableFindContentByIdPath": {
            "description": "Indicating whether find content ID by path is disabled",
            "type": "boolean",
            "default": false
          },
          "DisableRedirectUrlTracking": {
            "description": "Indicating whether redirect URL tracking is disabled",
            "type": "boolean",
            "default": false
          },
          "UrlProviderMode": {
            "enum": ["Default", "Relative", "Absolute", "Auto"],
            "default": "Auto"
          },
          "UmbracoApplicationUrl": {
            "type": "string"
          }
        }
      },
      "umbracoUnattended": {
        "properties": {
          "InstallUnattended": {
            "description": "Indicating whether unattended installs are enabled",
            "type": "boolean",
            "default": false
          },
          "UpgradeUnattended": {
            "description": "Indicating whether unattended upgrades are enabled",
            "type": "boolean",
            "default": false
          },
          "UnattendedUserName": {
            "description": "Use for creating a user with a name for Unattended Installs",
            "type": "string"
          },
          "UnattendedUserEmail": {
            "description": "Use for creating a user with an email for Unattended Installs",
            "type": "string"
          },
          "UnattendedUserPassword": {
            "description": "Use for creating a user with a password for Unattended Installs",
            "type": "string"
          }
        }
      },
      "umbracoModelsBuilder": {
        "properties": {
          "ModelsMode": {
            "description": "ModelsBuilder generation mode",
            "enum": [
              "Nothing",
              "InMemoryAuto",
              "SourceCodeManual",
              "SourceCodeAuto"
            ],
            "default": "InMemoryAuto"
          },
          "ModelsNamespace": {
            "type": "string",
            "description": "Namespace to use when generating strongly typed models",
            "default": "Umbraco.Cms.Web.Common.PublishedModels"
          },
          "ModelsDirectory": {
            "type": "string",
            "description": "Location to generate ModelsBuilder models",
            "default": "~/umbraco/models"
          },
          "DebugLevel": {
            "type": "integer",
            "description": "Indicates the debug level. For internal / development use. Set to greater than zero to enable detailed logging.",
            "default": 0
          },
          "AcceptUnsafeModelsDirectory": {
            "type": "boolean",
            "description": "Indicates that the directory indicated in ModelsDirectory is allowed to be outside the website root (e.g. ~/../../some/place). Because that can be a potential security risk, it is not allowed by default.",
            "default": false
          },
          "FlagOutOfDateModels": {
            "type": "boolean",
            "description": "Indicates whether out-of-date models (i.e. after a content type or data type has been modified) should be flagged.",
            "default": true
          }
        }
      },
      "AppSettings": {
        "type": "object",
        "description": "应用全局配置",
        "properties": {
          "InjectMiniProfiler": {
            "type": "boolean",
            "description": "集成 MiniProfiler 组件",
            "default": true
          },
          "InjectSpecificationDocument": {
            "type": "boolean",
            "description": "是否启用规范化文档",
            "default": true
          },
          "EnabledReferenceAssemblyScan": {
            "type": "boolean",
            "description": "是否启用引用程序集扫描",
            "default": false
          },
          "ExternalAssemblies": {
            "type": "array",
            "description": "外部程序集，扫描 dll 文件，如果是单文件发布，需拷贝放在根目录下",
            "default": [],
            "items": {
              "type": "string",
              "description": "格式：程序集名称;接口完整名称，如：Furion.Application;Furion.Application.ITestService"
            }
          },
          "ExcludeAssemblies": {
            "type": "array",
            "description": "排除扫描的程序集名称",
            "default": [],
            "items": {
              "type": "string",
              "description": "程序集名称，不区分大小写"
            }
          },
          "PrintDbConnectionInfo": {
            "type": "boolean",
            "description": "是否打印数据库连接信息到 MiniProfiler 中",
            "default": true
          },
          "OutputOriginalSqlExecuteLog": {
            "type": "boolean",
            "description": "是否输出原始 Sql 执行日志（ADO.NET）",
            "default": true
          },
          "SupportPackageNamePrefixs": {
            "type": "array",
            "description": "配置支持的包前缀名，只有特定的包名前缀才会被框架扫描",
            "default": [],
            "items": {
              "type": "string",
              "description": "程序集前缀"
            }
          },
          "VirtualPath": {
            "type": "string",
            "description": "【部署】二级虚拟目录，需以 / 开头",
            "default": ""
          }
        }
      },
      "CorsAccessorSettings": {
        "type": "object",
        "description": "跨域配置选项",
        "properties": {
          "PolicyName": {
            "type": "string",
            "description": "策略名称",
            "default": "App.Cors.Policy"
          },
          "WithOrigins": {
            "type": "array",
            "description": "允许来源域名，没有配置则允许所有来源",
            "default": [],
            "items": {
              "type": "string"
            }
          },
          "WithHeaders": {
            "type": "array",
            "description": "请求表头，没有配置则允许所有表头",
            "default": [],
            "items": {
              "type": "string"
            }
          },
          "WithExposedHeaders": {
            "type": "array",
            "description": "设置客户端可获取的响应标头",
            "default": [],
            "items": {
              "type": "string"
            }
          },
          "WithMethods": {
            "type": "array",
            "description": "设置跨域允许请求谓词，没有配置则允许所有",
            "default": [],
            "items": {
              "type": "string"
            }
          },
          "AllowCredentials": {
            "type": "boolean",
            "description": "是否允许跨域请求中的凭据",
            "default": true
          },
          "SetPreflightMaxAge": {
            "type": "number",
            "description": "设置预检过期时间",
            "default": 86400
          },
          "FixedClientToken": {
            "type": "boolean",
            "description": "是否默认配置 WithExposedHeaders",
            "default": true
          },
          "SignalRSupport": {
            "type": "boolean",
            "description": "启用 SignalR 跨域支持",
            "default": false
          }
        }
      },
      "ValidationTypeMessageSettings": {
        "type": "object",
        "description": "验证消息配置选项",
        "properties": {
          "Definitions": {
            "type": "array",
            "description": "配置验证类型对应的消息类型，[类型名称，类型消息][] 类型，如：[\"Required\", \"值不能为空或Null\"]",
            "default": [],
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "DependencyInjectionSettings": {
        "type": "object",
        "description": "依赖注入配置选项",
        "properties": {
          "Definitions": {
            "type": "array",
            "description": "外部注册定义",
            "default": [],
            "items": {
              "type": "object",
              "description": "外部注册类型模型",
              "properties": {
                "Interface": {
                  "type": "string",
                  "description": "接口类型，格式：\"程序集名称;接口完整名称\""
                },
                "Service": {
                  "type": "string",
                  "description": "实例类型，格式：\"程序集名称;接口完整名称\""
                },
                "RegisterType": {
                  "type": "string",
                  "description": "注册类型",
                  "enum": ["Transient", "Scoped", "Singleton"]
                },
                "Action": {
                  "type": "string",
                  "description": "添加服务方式，存在不添加，或继续添加",
                  "enum": ["Add", "TryAdd"]
                },
                "Pattern": {
                  "type": "string",
                  "description": "注册选项",
                  "enum": [
                    "Self",
                    "FirstInterface",
                    "SelfWithFirstInterface",
                    "ImplementedInterfaces",
                    "All"
                  ]
                },
                "Named": {
                  "type": "string",
                  "description": "注册别名，多服务时使用"
                },
                "Order": {
                  "type": "number",
                  "description": "排序，排序越大，则在后面注册",
                  "default": 0
                },
                "Proxy": {
                  "type": "string",
                  "description": "代理类型，格式：\"程序集名称;接口完整名称\""
                }
              }
            }
          }
        }
      },
      "DynamicApiControllerSettings": {
        "type": "object",
        "description": "动态接口控制器配置",
        "properties": {
          "DefaultRoutePrefix": {
            "type": "string",
            "description": "默认路由前缀",
            "default": "api"
          },
          "DefaultHttpMethod": {
            "type": "string",
            "description": "默认请求谓词",
            "enum": ["GET", "POST", "PUT", "DELETE", "PATCH", "HEAD"],
            "default": "POST"
          },
          "DefaultModule": {
            "type": "string",
            "description": "默认模块名称"
          },
          "LowercaseRoute": {
            "type": "boolean",
            "description": "小写路由",
            "default": true
          },
          "AsLowerCamelCase": {
            "type": "boolean",
            "description": "小驼峰命名（首字符小写）",
            "default": false
          },
          "KeepVerb": {
            "type": "boolean",
            "description": "保留行为名称谓词",
            "default": false
          },
          "KeepName": {
            "type": "boolean",
            "description": "保留名称",
            "default": false
          },
          "CamelCaseSeparator": {
            "type": "string",
            "description": "骆驼命名分隔符",
            "default": "-"
          },
          "VersionSeparator": {
            "type": "string",
            "description": "版本号分隔符",
            "default": "@"
          },
          "ModelToQuery": {
            "type": "boolean",
            "description": "模型转查询参数（只有GET、HEAD请求有效）",
            "default": false
          },
          "SupportedMvcController": {
            "type": "boolean",
            "description": "支持Mvc控制器处理",
            "default": false
          },
          "UrlParameterization": {
            "type": "boolean",
            "description": "配置参数 [FromQuery] 化，默认 false ([FromRoute])",
            "default": false
          },
          "AbandonControllerAffixes": {
            "type": "array",
            "description": "被舍弃的控制器名称前后缀",
            "default": [
              "AppServices",
              "AppService",
              "ApiController",
              "Controller",
              "Services",
              "Service"
            ],
            "items": {
              "type": "string"
            }
          },
          "AbandonActionAffixes": {
            "type": "array",
            "description": "被舍弃的行为名称前后缀",
            "default": ["Async"],
            "items": {
              "type": "string"
            }
          },
          "VerbToHttpMethods": {
            "type": "array",
            "description": "复写默认配置路由规则配置",
            "default": [],
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "DefaultArea": {
            "type": "string",
            "description": "默认区域",
            "default": ""
          },
          "ForceWithRoutePrefix": {
            "type": "boolean",
            "description": "强制携带路由前缀，即使使用 [Route] 重写",
            "default": false
          }
        }
      },
      "FriendlyExceptionSettings": {
        "type": "object",
        "description": "友好异常配置选项",
        "properties": {
          "HideErrorCode": {
            "type": "boolean",
            "description": "隐藏错误码",
            "default": false
          },
          "DefaultErrorCode": {
            "type": "string",
            "description": "默认错误码",
            "default": ""
          },
          "DefaultErrorMessage": {
            "type": "string",
            "description": "默认错误消息",
            "default": "Internal Server Error"
          },
          "ThrowBah": {
            "type": "boolean",
            "description": "标记 Oops.Oh 为业务异常，也就是不会进入异常处理",
            "default": false
          },
          "LogError": {
            "type": "boolean",
            "description": "是否输出异常日志，默认 true",
            "default": true
          }
        }
      },
      "ErrorCodeMessageSettings": {
        "type": "object",
        "description": "异常配置选项，最优的方式是采用后期配置，也就是所有异常状态码先不设置（推荐）",
        "properties": {
          "Definitions": {
            "type": "array",
            "description": "异常状态码配置列表",
            "default": [],
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "SpecificationDocumentSettings": {
        "type": "object",
        "description": "规范化文档配置选项",
        "properties": {
          "DocumentTitle": {
            "type": "string",
            "description": "文档标题",
            "default": "Specification Api Document"
          },
          "DefaultGroupName": {
            "type": "string",
            "description": "默认分组名",
            "default": "Default"
          },
          "EnableAuthorized": {
            "type": "boolean",
            "description": "启用授权支持",
            "default": true
          },
          "FormatAsV2": {
            "type": "boolean",
            "description": "格式化为V2版本",
            "default": false
          },
          "RoutePrefix": {
            "type": "string",
            "description": "配置规范化文档地址",
            "default": ""
          },
          "DocExpansionState": {
            "type": "string",
            "description": "文档展开设置",
            "enum": [ "List", "Full", "None" ]
          },
          "XmlComments": {
            "type": "array",
            "description": "XML 描述文件",
            "items": {
              "type": "string"
            }
          },
          "GroupOpenApiInfos": {
            "type": "array",
            "description": "分组信息",
            "items": {
              "type": "object",
              "description": "规范化文档开放接口信息",
              "properties": {
                "Group": {
                  "type": "string",
                  "description": "分组名，所属组"
                },
                "Order": {
                  "type": "number",
                  "description": "排序",
                  "default": 0
                },
                "Visible": {
                  "type": "boolean",
                  "description": "是否可见"
                },
                "Title": {
                  "type": "string",
                  "description": "分组标题"
                },
                "Description": {
                  "type": "string",
                  "description": "分组描述"
                },
                "Version": {
                  "type": "string",
                  "description": "分组版本号"
                },
                "TermsOfService": {
                  "type": "string",
                  "description": "服务地址"
                },
                "Contact": {
                  "type": "object",
                  "description": "联系人",
                  "properties": {
                    "Name": {
                      "type": "string",
                      "description": "名称"
                    },
                    "Url": {
                      "type": "string",
                      "description": "链接地址"
                    },
                    "Email": {
                      "type": "string",
                      "description": "电子邮箱"
                    }
                  }
                },
                "License": {
                  "type": "object",
                  "description": "授权协议",
                  "properties": {
                    "Name": {
                      "type": "string",
                      "description": "协议名称"
                    },
                    "Url": {
                      "type": "string",
                      "description": "协议地址"
                    }
                  }
                }
              }
            }
          },
          "SecurityDefinitions": {
            "type": "array",
            "description": "安全定义，授权定义",
            "items": {
              "type": "object",
              "properties": {
                "Id": {
                  "type": "string",
                  "description": "唯一 Id"
                },
                "Requirement": {
                  "type": "object",
                  "description": "安全配置需求",
                  "properties": {
                    "Scheme": {
                      "type": "object",
                      "properties": {
                        "Type": {
                          "type": "string",
                          "enum": [ "ApiKey", "Http", "OAuth2", "OpenIdConnect" ]
                        },
                        "Description": {
                          "type": "string"
                        },
                        "Name": {
                          "type": "string"
                        },
                        "In": {
                          "type": "string",
                          "enum": [ "Query", "Header", "Path", "Cookie" ]
                        },
                        "Scheme": {
                          "type": "string"
                        },
                        "BearerFormat": {
                          "type": "string"
                        },
                        "Flows": {
                          "type": "object",
                          "properties": {
                            "Implicit": {
                              "type": "object",
                              "properties": {
                                "AuthorizationUrl": {
                                  "type": "string"
                                },
                                "TokenUrl": {
                                  "type": "string"
                                },
                                "RefreshUrl": {
                                  "type": "string"
                                }
                              }
                            },
                            "Password": {
                              "type": "object",
                              "properties": {
                                "AuthorizationUrl": {
                                  "type": "string"
                                },
                                "TokenUrl": {
                                  "type": "string"
                                },
                                "RefreshUrl": {
                                  "type": "string"
                                }
                              }
                            },
                            "ClientCredentials": {
                              "type": "object",
                              "properties": {
                                "AuthorizationUrl": {
                                  "type": "string"
                                },
                                "TokenUrl": {
                                  "type": "string"
                                },
                                "RefreshUrl": {
                                  "type": "string"
                                }
                              }
                            },
                            "AuthorizationCode": {
                              "type": "object",
                              "properties": {
                                "AuthorizationUrl": {
                                  "type": "string"
                                },
                                "TokenUrl": {
                                  "type": "string"
                                },
                                "RefreshUrl": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "OpenIdConnectUrl": {
                          "type": "string"
                        },
                        "UnresolvedReference": {
                          "type": "boolean"
                        },
                        "Reference": {
                          "type": "object",
                          "properties": {
                            "ExternalResource": {
                              "type": "string"
                            },
                            "Type": {
                              "type": "string",
                              "enum": [
                                "Schema",
                                "Response",
                                "Parameter",
                                "Example",
                                "RequestBody",
                                "Header",
                                "SecurityScheme",
                                "Link",
                                "Callback",
                                "Tag"
                              ]
                            },
                            "Id": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "Accesses": {
                      "type": "array",
                      "description": "权限配置",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "Type": {
                  "type": "string",
                  "enum": [ "ApiKey", "Http", "OAuth2", "OpenIdConnect" ]
                },
                "Description": {
                  "type": "string"
                },
                "Name": {
                  "type": "string"
                },
                "In": {
                  "type": "string",
                  "enum": [ "Query", "Header", "Path", "Cookie" ]
                },
                "Scheme": {
                  "type": "string"
                },
                "BearerFormat": {
                  "type": "string"
                },
                "Flows": {
                  "type": "object",
                  "properties": {
                    "Implicit": {
                      "type": "object",
                      "properties": {
                        "AuthorizationUrl": {
                          "type": "string"
                        },
                        "TokenUrl": {
                          "type": "string"
                        },
                        "RefreshUrl": {
                          "type": "string"
                        }
                      }
                    },
                    "Password": {
                      "type": "object",
                      "properties": {
                        "AuthorizationUrl": {
                          "type": "string"
                        },
                        "TokenUrl": {
                          "type": "string"
                        },
                        "RefreshUrl": {
                          "type": "string"
                        }
                      }
                    },
                    "ClientCredentials": {
                      "type": "object",
                      "properties": {
                        "AuthorizationUrl": {
                          "type": "string"
                        },
                        "TokenUrl": {
                          "type": "string"
                        },
                        "RefreshUrl": {
                          "type": "string"
                        }
                      }
                    },
                    "AuthorizationCode": {
                      "type": "object",
                      "properties": {
                        "AuthorizationUrl": {
                          "type": "string"
                        },
                        "TokenUrl": {
                          "type": "string"
                        },
                        "RefreshUrl": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "OpenIdConnectUrl": {
                  "type": "string"
                },
                "UnresolvedReference": {
                  "type": "boolean"
                },
                "Reference": {
                  "type": "object",
                  "properties": {
                    "ExternalResource": {
                      "type": "string"
                    },
                    "Type": {
                      "type": "string",
                      "enum": [
                        "Schema",
                        "Response",
                        "Parameter",
                        "Example",
                        "RequestBody",
                        "Header",
                        "SecurityScheme",
                        "Link",
                        "Callback",
                        "Tag"
                      ]
                    },
                    "Id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "Servers": {
            "type": "array",
            "description": "配置 Servers",
            "default": [],
            "items": {
              "type": "object",
              "properties": {
                "Description": {
                  "type": "string",
                  "description": "描述"
                },
                "Url": {
                  "type": "string",
                  "description": "链接地址"
                }
              }
            }
          },
          "HideServers": {
            "type": "boolean",
            "description": "隐藏 Servers",
            "default": true
          },
          "RouteTemplate": {
            "type": "string",
            "description": "默认 swagger.json 路由模板",
            "default": "swagger/{documentName}/swagger.json"
          },
          "PackagesGroups": {
            "type": "array",
            "description": "配置安装第三方包的分组名",
            "default": [],
            "items": {
              "type": "string"
            }
          },
          "EnableEnumSchemaFilter": {
            "type": "boolean",
            "description": "启用枚举 Schema 筛选器",
            "default": true
          },
          "EnableTagsOrderDocumentFilter": {
            "type": "boolean",
            "description": "启用标签排序筛选器",
            "default": true
          },
          "ServerDir": {
            "type": "string",
            "description": "服务目录（修正 IIS 创建 Application 问题）"
          },
          "LoginInfo": {
            "type": "object",
            "description": "配置规范化文档登录信息",
            "properties": {
              "Enabled": {
                "type": "boolean",
                "description": "是否启用授权控制",
                "default": false
              },
              "CheckUrl": {
                "type": "string",
                "description": "检查登录地址"
              },
              "SubmitUrl": {
                "type": "string",
                "description": "提交登录地址"
              },
              "UserName": {
                "type": "string",
                "description": "用户名"
              },
              "Password": {
                "type": "string",
                "description": "密码"
              }
            }
          },
          "EnableAllGroups": {
            "type": "boolean",
            "description": "启用 All Groups 功能",
            "default": false
          },
          "EnumToNumber": {
            "type": "boolean",
            "description": "枚举类型生成值类型",
            "default": false
          }
        }
      },
      "LocalizationSettings": {
        "type": "object",
        "description": "多语言配置选项",
        "properties": {
          "ResourcesPath": {
            "type": "string",
            "description": "资源路径",
            "default": "Resources"
          },
          "SupportedCultures": {
            "type": "array",
            "description": "支持的语言列表",
            "items": {
              "type": "string",
              "enum": [
                "af",
                "af-ZA",
                "sq",
                "sq-AL",
                "ar",
                "ar-DZ",
                "ar-BH",
                "ar-EG",
                "ar-IQ",
                "ar-JO",
                "ar-KW",
                "ar-LB",
                "ar-LY",
                "ar-MA",
                "ar-OM",
                "ar-QA",
                "ar-SA",
                "ar-SY",
                "ar-TN",
                "ar-AE",
                "ar-YE",
                "hy",
                "hy-AM",
                "az",
                "az-AZ-Cyrl",
                "az-AZ-Latn",
                "eu",
                "eu-ES",
                "be",
                "be-BY",
                "bg",
                "bg-BG",
                "ca",
                "ca-ES",
                "zh",
                "zh-HK",
                "zh-MO",
                "zh-CN",
                "zh-CHS",
                "zh-SG",
                "zh-TW",
                "zh-CHT",
                "zh-Hans",
                "zh-Hant",
                "hr",
                "hr-HR",
                "cs",
                "cs-CZ",
                "da",
                "da-DK",
                "div",
                "div-MV",
                "nl",
                "nl-BE",
                "nl-NL",
                "en",
                "en-AU",
                "en-BZ",
                "en-CA",
                "en-CB",
                "en-IE",
                "en-JM",
                "en-NZ",
                "en-PH",
                "en-ZA",
                "en-TT",
                "en-GB",
                "en-US",
                "en-ZW",
                "et",
                "et-EE",
                "fo",
                "fo-FO",
                "fa",
                "fa-IR",
                "fi",
                "fi-FI",
                "fr",
                "fr-BE",
                "fr-CA",
                "fr-FR",
                "fr-LU",
                "fr-MC",
                "fr-CH",
                "gl",
                "gl-ES",
                "ka",
                "ka-GE",
                "de",
                "de-AT",
                "de-DE",
                "de-LI",
                "de-LU",
                "de-CH",
                "el",
                "el-GR",
                "gu",
                "gu-IN",
                "he",
                "he-IL",
                "hi",
                "hi-IN",
                "hu",
                "hu-HU",
                "is",
                "is-IS",
                "id",
                "id-ID",
                "it",
                "it-IT",
                "it-CH",
                "ja",
                "ja-JP",
                "kn",
                "kn-IN",
                "kk",
                "kk-KZ",
                "kok",
                "kok-IN",
                "ko",
                "ko-KR",
                "ky",
                "ky-KZ",
                "lv",
                "lv-LV",
                "lt",
                "lt-LT",
                "mk",
                "mk-MK",
                "ms",
                "ms-BN",
                "ms-MY",
                "mr",
                "mr-IN",
                "mn",
                "mn-MN",
                "no",
                "nb-NO",
                "nn-NO",
                "pl",
                "pl-PL",
                "pt",
                "pt-BR",
                "pt-PT",
                "pa",
                "pa-IN",
                "ro",
                "ro-RO",
                "ru",
                "ru-RU",
                "sa",
                "sa-IN",
                "sr-SP-Cyrl",
                "sr-SP-Latn",
                "sk",
                "sk-SK",
                "sl",
                "sl-SI",
                "es",
                "es-AR",
                "es-BO",
                "es-CL",
                "es-CO",
                "es-CR",
                "es-DO",
                "es-EC",
                "es-SV",
                "es-GT",
                "es-HN",
                "es-MX",
                "es-NI",
                "es-PA",
                "es-PY",
                "es-PE",
                "es-PR",
                "es-ES",
                "es-UY",
                "es-VE",
                "sw",
                "sw-KE",
                "sv",
                "sv-FI",
                "sv-SE",
                "syr",
                "syr-SY",
                "ta",
                "ta-IN",
                "tt",
                "tt-RU",
                "te",
                "te-IN",
                "th",
                "th-TH",
                "tr",
                "tr-TR",
                "uk",
                "uk-UA",
                "ur",
                "ur-PK",
                "uz",
                "uz-UZ-Cyrl",
                "uz-UZ-Latn",
                "vi",
                "vi-VN"
              ]
            }
          },
          "DefaultCulture": {
            "type": "string",
            "description": "默认的语言",
            "default": ""
          },
          "LanguageFilePrefix": {
            "type": "string",
            "description": "资源文件名前缀",
            "default": "Lang"
          },
          "AssemblyName": {
            "type": "string",
            "description": "资源所在程序集名称，默认入口程序集名称"
          },
          "DateTimeFormatCulture": {
            "type": "string",
            "description": "设置 DateTime 格式化标准语言",
            "default": ""
          }
        }
      },
      "JWTSettings": {
        "type": "object",
        "description": "Jwt 配置",
        "properties": {
          "ValidateIssuerSigningKey": {
            "type": "boolean",
            "description": "验证签发方密钥"
          },
          "IssuerSigningKey": {
            "type": "string",
            "description": "签发方密钥"
          },
          "ValidateIssuer": {
            "type": "boolean",
            "description": "验证签发方"
          },
          "ValidIssuer": {
            "type": "string",
            "description": "签发方"
          },
          "ValidateAudience": {
            "type": "boolean",
            "description": "验证签收方"
          },
          "ValidAudience": {
            "type": "string",
            "description": "签收方"
          },
          "ValidateLifetime": {
            "type": "boolean",
            "description": "验证生存期"
          },
          "ClockSkew": {
            "type": "number",
            "description": "过期时间容错值，解决服务器端时间不同步问题（秒）",
            "default": 10
          },
          "ExpiredTime": {
            "type": "number",
            "description": "过期时间（分钟）",
            "default": 20
          },
          "Algorithm": {
            "type": "string",
            "description": "加密算法",
            "default": "HS256",
            "enum": [
              "HS256",
              "HS384",
              "HS512",
              "PS256",
              "PS384",
              "PS512",
              "RS256",
              "RS384",
              "RS512",
              "ES256",
              "ES256K",
              "ES384",
              "ES512",
              "EdDSA"
            ]
          }
        }
      },
      "UnifyResultSettings": {
        "type": "object",
        "description": "规范化配置选项",
        "properties": {
          "Return200StatusCodes": {
            "type": "array",
            "description": "设置返回 200 状态码列表",
            "default": [401, 403],
            "items": {
              "type": "number"
            }
          },
          "AdaptStatusCodes": {
            "type": "array",
            "description": "适配（篡改）Http 状态码（只支持短路状态码，比如 401，403，500 等）",
            "default": [],
            "items": {
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          },
          "SupportMvcController": {
            "type": "boolean",
            "description": "是否支持 MVC 控制台规范化处理",
            "default": false
          }
        }
      }
    },
    "patternProperties": {
      "^WebOptimizer$": {
        "$ref": "#/definitions/webOptimizer"
      },
      "^webOptimizer$": {
        "$ref": "#/definitions/webOptimizer"
      },
      "^weboptimizer$": {
        "$ref": "#/definitions/webOptimizer"
      },
      "^(cdn|Cdn)$": {
        "$ref": "#/definitions/cdn"
      },
      "^(pwa|PWA|Pwa)$": {
        "$ref": "#/definitions/pwa"
      },
      "^(ElmahIo|Elmahio|elmahIo|elmahio)$": {
        "$ref": "#/definitions/ElmahIo"
      },
      "^(nlog|Nlog|NLog)$": {
        "$ref": "#/definitions/NLog"
      },
      "^(Umbraco|umbraco)$": {
        "$ref": "#/definitions/umbraco"
      }
    }
  }
  